~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Red Hat - demo
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


#######################################
demo - walkthrough	
#######################################

primary dev dmeo vm:	AWS - SampApp05 - ec2-user@ec2-44-192-80-47.compute-1.amazonaws.com

# conect through MobaX terminal
cd /home/orin/MyDocuments/aob3/education/aws
ssh -i "SampApp01.pem" ec2-user@ec2-44-192-80-47.compute-1.amazonaws.com

# previously pulled demo repo
cd ~/dev/demo
ls -al
docker-compose up
# note the logs for the start up for db_1 and web_1

# review
docker ps
docker ps -a

# local networking
netstat -pant | grep  8000
netstat -pant | grep  127

# view local website
~/.Xclients

# launch browser: Aplications > Internet > chromium
# pull chromiun window to screen share window
http://127.0.0.1:8000 
# diplayed the django generic page


# log into mysql client container
docker-compose exec db mysql -u root -p
OR
docker exec -it demo_db_1 bash
mysql -u root -p 

mysql4fun

show databases;
use demodb;
show tables;

select * from streaming_songs;

# cheap way to insert / if more time then setup a pythin script to insert / better: insert through web ui / api call
INSERT INTO streaming_songs (title, rating) VALUES ('song', '1'),('song', '2') ;


# stop container
cd ~/dev/demo

# show db tables still persist
sudo ls -la /home/ec2-user/dev/demo/.dbdata/demodb/

# start up containers - in background
docker-compose up -d



############################################################
setup on base aws-ami
############################################################

- would be nice to see if this worked on ubuntu as well

# clean vm: SampApp06
ssh -i "SampApp01.pem" ec2-user@ec2-3-235-242-213.compute-1.amazonaws.com

# clean vm: SampApp08
ssh -i "SampApp01.pem" ec2-user@ec2-34-229-161-168.compute-1.amazonaws.com

###### setup on new aws-ec2-ami
# create free tier aws ami
# login as ec2-user
whoami

# get git
sudo yum install git -y

# create dev working dir
cd ~
mkdir dev
cd dev
pwd

# download repo demo
git clone https://github.com/aob3/demo.git

cd demo
# setup git credentials
git config user.name "aob"
git config user.email "orin.bishop@yahoo.com"

ls -la

# switch to root
sudo su -
whoami
cd /home/ec2-user/dev/demo

# run setup script
./dmeo_prep_setup.sh

# log out
# log in as ec2-user
# try docker
docker ps

cd ~/dev/demo
# rename the file: .dbdemo
mv .dbdemo.orig

# run app
docker-compose up 




###################################################
# optional - setup django virtual env
###################################################

sudo yum install python3-pip -y
pip3 install django
pip3 freeze
sudo pip3 install virtualenv
whereis virtualenv
cd ~
virtualenv djangoenv
# OR /usr/local/bin/virtualenv djangoenv

# creates env in: ~/djangoenv/ .
source ~/djangoenv/bin/activate
pip3 install --upgrade Django==2.*
python -m django --version

# to exit env
deactivate


# create second env - for dev
source ~/djangoenv2/bin/activate
pip3 install --upgrade Django
python -m django --version
# to exit
deactivate

###################################################
###################################################




- ready to start dev
	
- new demo vm:
	- basic setup 
	- download repo
	- start up
		docker-compose up
		docker-compose up -d 
		
	- review: containers
	
	- view website - generic
		
	- view db
	- write to db
	- review db
	- stop containers
	- review db location
	- start containers
	- review db

- port to new ami
	- 

- run with -d

- py script to update db

- reference: https://www.django-rest-framework.org/tutorial/quickstart/


